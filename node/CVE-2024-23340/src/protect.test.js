const { test } = require("node:test");
const { equal } = require("node:assert");

test("Zen prevents Path Traversal", async () => {
  process.env.AIKIDO_BLOCK = "true";
  process.env.AIKIDO_DEBUG = "true";

  require("@aikidosec/firewall");

  const { Hono } = require("hono");
  const { serveStatic } = require("@hono/node-server/serve-static");
  const { serve } = require("@hono/node-server");
  const http = require("node:http");

  const app = new Hono();

  app.use("/static/*", serveStatic({ root: "./" }));

  app.get("/", async (c) => {
    return c.text("Hello World");
  });

  const server = await new Promise((resolve) => {
    const _server = serve(
      {
        fetch: app.fetch,
        port: 3123,
      },
      () => {
        resolve(_server);
      }
    );
  });

  const response = await new Promise((resolve, reject) => {
    const req = http.request(
      {
        hostname: "localhost",
        port: 3123,
        path: "/static/../package.json", // Path traversal attempt
        method: "GET",
      },
      (res) => {
        let data = "";

        res.on("data", (chunk) => {
          data += chunk;
        });

        res.on("end", () => {
          resolve(data);
        });
      }
    );

    req.on("error", (err) => {
      reject(err);
    });

    req.end();
  });

  const data = JSON.parse(response);

  equal(typeof data, "object");
  equal(data.scripts.start, "node --test --test-force-exit");

  server.close();
});
