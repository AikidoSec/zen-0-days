const { test } = require("node:test");
const { throws, rejects } = require("node:assert");
const { runWithContext } = require("@aikidosec/firewall/agent/Context");

test("Zen Protects against Command Injection", async () => {
  process.env.AIKIDO_BLOCK = "true";
  process.env.AIKIDO_DEBUG = "true";

  require("@aikidosec/firewall");

  const df = require("node-df");

  const options = {
    file: "/;touch hacked.tmp",
    prefixMultiplier: "GB",
    isDisplayPrefixMultiplier: true,
    precision: 2,
  };

  await runWithContext(
    {
      method: "GET",
      remoteAddress: "1.2.3.4",
      body: undefined,
      url: "/test",
      headers: {},
      routeParams: {},
      query: {
        test: "/;touch hacked.tmp",
      },
      cookies: {},
      source: "test",
      route: "/test",
    },
    async () => {
      await rejects(
        new Promise((resolve, reject) => {
          df(options, function (error, response) {
            if (error) {
              reject(error);
              return;
            }

            resolve(response);
          });
        }),

        {
          message:
            "Zen has blocked a shell injection: child_process.exec(...) originating from query.test",
        }
      );
    }
  );
});
