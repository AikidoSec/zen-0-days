process.env.AIKIDO_BLOCK = "true";
require("@aikidosec/firewall");

const cluster = require("cluster");
const express = require("express");

async function main() {
  if (cluster.isPrimary) {
    // We need to try the exploit multiple times, because it's probability to work is 16/256
    // See https://github.com/libuv/libuv/security/advisories/GHSA-f74f-cvh7-c6q6 for explanation
    const startWorkerCount = 257;

    for (let i = 1; i < startWorkerCount; i++) {
      const worker = cluster.fork();

      const exitCode = await new Promise((resolve) => {
        worker.on("exit", (code, signal) => {
          console.log(`Test ${i} finished`);
          resolve(code);
        });
      });

      if (exitCode === 0) {
        console.log("SSRF test passed");
        process.exit(0);
      }
    }

    console.error(`All ${startWorkerCount} tests failed`);
    process.exit(1);
  } else {
    const axios = require("axios"); // Vulnerability is *not* in axios, but it returns better error messages than fetch

    const app = express();
    app.get("/", async (req, res) => {
      const url = req.query?.url || "";
      if (new URL(url).hostname.endsWith(".example.com")) {
        try {
          const { data } = await axios.get(url, { timeout: 3000 });
          res.send(data);
        } catch (e) {
          if (e.message.includes("ENOTFOUND")) {
            return res.status(404).send("DNS ENOTFOUND");
          }
          res.status(400).send(e.message);
        }
      } else {
        res.status(400).send("Invalid url");
      }
    });

    await new Promise((resolve) => app.listen(8123, resolve));

    const payload = "0x" + "0".repeat(246) + "7f000001";
    const response = await fetch(
      `http://localhost:8123?url=http://${payload}.example.com:3000/secret`
    );

    const responseText = await response.text();
    if (
      responseText.includes("Zen has blocked a server-side request forgery")
    ) {
      console.log("Test passed - SSRF blocked");
      process.exit(0);
    }

    process.exit(1);
  }
}

main();
