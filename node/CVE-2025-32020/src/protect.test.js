const { test } = require("node:test");
const { equal } = require("node:assert");

test("Zen Node.js prevents SQL injection", async () => {
  require("@aikidosec/firewall");

  const { Hono } = require("hono");
  const { CrudRequestParser } = require("crud-query-parser/parsers/crud");
  const { TypeOrmQueryAdapter } = require("crud-query-parser/adapters/typeorm");

  const AppDataSource = require("./data-source");
  const UserEntity = require("./entities/UserEntity");
  const adapter = new TypeOrmQueryAdapter();

  const app = new Hono();
  const parser = new CrudRequestParser();

  await AppDataSource.initialize();

  const repository = AppDataSource.getRepository(UserEntity);

  app.get("/query", async (c) => {
    try {
      const crudRequest = parser.parse(c.req.query());

      const users = await adapter.getMany(
        repository.createQueryBuilder(),
        crudRequest
      );
      return c.json(users);
    } catch (error) {
      return c.text(error.message, 500);
    }
  });

  const response = await app.request("/query?sort=name; DELETE FROM users; --");
  equal(response.status, 500);
  equal(
    await response.text(),
    "Zen has blocked an SQL injection: sqlite3.all(...) originating from query.sort"
  );

  await AppDataSource.destroy();
});
