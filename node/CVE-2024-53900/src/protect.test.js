const { test } = require("node:test");
const { equal } = require("node:assert");

test("Protects against JS Code Injection", async () => {
  require("@aikidosec/firewall");

  const { Hono } = require("hono");

  const app = new Hono();

  const mongoose = require("mongoose");
  const { Schema } = mongoose;

  mongoose.connect("mongodb://root:password@172.17.0.1:27017/");

  const ParentSchema = new Schema({
    name: String,
    child: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Child",
    },
    children: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Child",
      },
    ],
  });

  const ChildSchema = new Schema({
    name: String,
  });
  ChildSchema.virtual("parent", {
    ref: "Parent",
    localField: "_id",
    foreignField: "parent",
  });

  const Parent = mongoose.model("Parent", ParentSchema);
  const Child = mongoose.model("Child", ChildSchema);

  const child = await Child.create({ name: "Luke" });
  const parent = await Parent.create({ name: "Anakin", child: child._id });

  app.post("/insecure", async (c) => {
    try {
      const { where } = await c.req.json();
      const result = await parent.populate({
        path: "child",
        match: { $where: where },
      });

      return c.json(result);
    } catch (error) {
      return c.text(error.message, 500);
    }
  });

  const response = await app.request("/insecure", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ where: "this.name === 'Luke'" }),
  });

  equal(response.status, 500);
  equal(
    await response.text(),
    "Zen has blocked a NoSQL injection: MongoDB.Collection.find(...) originating from body.where"
  );

  mongoose.disconnect();
});
